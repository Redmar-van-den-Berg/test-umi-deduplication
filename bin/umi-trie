#!/usr/bin/env python3

import argparse
import logging
import os

import dnaio
import xopen

logging.basicConfig(
        format='%(message)s',
        level=logging.INFO,
)


def create_hash(f, r, u):
    return ''.join((f.sequence[:8], r.sequence[:8], u.sequence[:8]))


def main(args):
    # Input files
    forward = dnaio.open(args.forward, opener=xopen.xopen)
    reverse = dnaio.open(args.reverse, opener=xopen.xopen)
    umi = dnaio.open(args.umi, opener=xopen.xopen)

    # Output files
    fout = xopen.xopen(args.forward_out, 'wb')
    rout = xopen.xopen(args.reverse_out, 'wb')
    uout = xopen.xopen(args.umi_out, 'wb')

    # Trie to keep track of the umi/read combo's we have seen
    hash_set = set()
    unique_reads = 0
    duplicate_reads = 0

    for f, r, u in zip(forward, reverse, umi):

        # The unique value we are putting in the set
        h = create_hash(f, r, u)

        if h not in hash_set:
            unique_reads += 1
            hash_set.add(h)
            fout.write(f.fastq_bytes())
            rout.write(r.fastq_bytes())
            uout.write(u.fastq_bytes())
        else:
            duplicate_reads += 1

        if (unique_reads + duplicate_reads) % 1000_000 == 0:
            u = unique_reads
            d = duplicate_reads
            logging.info(f'Parsed {u+d} reads ({u} unique, {d} duplicate)')

    total_reads = unique_reads + duplicate_reads
    perc_unique = round((unique_reads/total_reads)*100,4)
    logging.info(f'Duplicate reads: {duplicate_reads}')
    logging.info(f'Left after removing perfect duplicates: {unique_reads} ({perc_unique}%).')


def output_file_name(infile, folder):
    """ Determine the output filename """
    fname = os.path.basename(infile)
    base, *rest = fname.split('.')
    base += '_dedup'
    fout = '.'.join([base] + rest)
    return f"{folder}/{fout}"


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('forward')
    parser.add_argument('reverse')
    parser.add_argument('umi')
    parser.add_argument('-f', default='.', required=False, help='output folder')
    args = parser.parse_args()

    # Determine the output filenames
    args.forward_out = output_file_name(args.forward, args.f)
    args.reverse_out = output_file_name(args.reverse, args.f)
    args.umi_out = output_file_name(args.umi, args.f)
    main(args)
